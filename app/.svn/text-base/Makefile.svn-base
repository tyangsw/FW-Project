#
# Copyright (C) 2014-2015 North Atlantic Industries, Inc.
#

#############################################################################
# Define the Module to build.
#
# Module ID = Type + Subtype. For example, to build for "AD4" module, define:
#    MODULE_TYPE = AD
#    MODULE_SUBTYPE = 4
#############################################################################

# ZZ1 Module ("generic" project, ie: no module specific code)
#MODULE_TYPE = ZZ
#MODULE_SUBTYPE = 1

# A/D Module
#MODULE_TYPE = AD
#MODULE_SUBTYPE = 1  # 12-channel; ± <10 VDC
#MODULE_SUBTYPE = 2  # 12-channel; ± <50 VDC
#MODULE_SUBTYPE = 3  # 12-channel; ± <100 VDC
#MODULE_SUBTYPE = 4  # 16-channel; ± <10 VDC
#MODULE_SUBTYPE = 5  # 16-channel; ± <50 VDC
#MODULE_SUBTYPE = 6  # 16-channel; ± <100 VDC

# ARINC Module
#MODULE_TYPE = AR
#MODULE_SUBTYPE = 1  # 12-channel; ARINC 429/575

# CANBus Module
#MODULE_TYPE = CB
#MODULE_SUBTYPE = 1  # 8-channel; 2.0A/B
#MODULE_SUBTYPE = 2  # 8-channel; J1939
#MODULE_SUBTYPE = 3  # 8-channel; J1939 and 2.0A/B

# D/A Module
#MODULE_TYPE = DA
#MODULE_SUBTYPE = 1  # 12-channel; ± 10 V; 25 mA Per Channel; Current or Voltage Control
#MODULE_SUBTYPE = 2  # 16-channel; ± 10 V; 10 mA Per Channel; No Current Control
#MODULE_SUBTYPE = 3  # 4-channel; ± 25 V; 100 mA; Voltage or Current Out
#MODULE_SUBTYPE = 4  # 4-channel; ± 20 to ± 80 V; 10 mA; Voltage Control Only

# Differential I/O Module
#MODULE_TYPE = DF
#MODULE_SUBTYPE = 1  # 16-channel; ±10V
#MODULE_SUBTYPE = 2  # Enhanced version of "DF1"
#MODULE_SUBTYPE = 3  # 16-channel; Differential IO/CTS; Same HW as "DF1", special "output" timing

# D/SYN(RSL) Module
#MODULE_TYPE = DS
#MODULE_SUBTYPE = 1  # 1-channel; 2-28 VLL; 47Hz - 1KHz; 3VA/Ch(Max)
#MODULE_SUBTYPE = 2  # 1-channel; 2-28 VLL; 1KHz - 5KHz; 3VA/Ch(Max)
#MODULE_SUBTYPE = 3  # 1-channel; 2-28 VLL; 5KHz - 10KHz; 3VA/Ch(Max)
#MODULE_SUBTYPE = 4  # 1-channel; 2-28 VLL; 10KHz - 20KHz; 3VA/Ch(Max)
#MODULE_SUBTYPE = 5  # 1-channel; 28-90 VLL; 47Hz - 1KHz; 3VA/Ch(Max)
#MODULE_SUBTYPE = 8  # 1-channel; 90 VLL; 115 VREF; 400 Hz; 8VA max
#MODULE_SUBTYPE = A  # 2-channel; 2-28 VLL; 47Hz - 1KHz; 1.5VA/Ch(Max)
#MODULE_SUBTYPE = B  # 2-channel; 2-28 VLL; 1KHz - 5KHz; 1.5VA/Ch(Max)
#MODULE_SUBTYPE = C  # 2-channel; 2-28 VLL; 5KHz - 10KHz; 1.5VA/Ch(Max)
#MODULE_SUBTYPE = D  # 2-channel; 2-28 VLL; 10KHz - 20KHz; 1.5VA/Ch(Max)
#MODULE_SUBTYPE = E  # 2-channel; 28-90 VLL; 47Hz - 1KHz; 1.5VA/Ch(Max)
#MODULE_SUBTYPE = J  # 3-channel; 2-28 VLL; 47Hz - 1KHz; 0.5VA/Ch(Max)
#MODULE_SUBTYPE = K  # 3-channel; 2-28 VLL; 1KHz - 5KHz; 0.5VA/Ch(Max)
#MODULE_SUBTYPE = L  # 3-channel; 2-28 VLL; 5KHz - 10KHz; 0.5VA/Ch(Max)
#MODULE_SUBTYPE = M  # 3-channel; 2-28 VLL; 10KHz - 20KHz; 0.5VA/Ch(Max)
#MODULE_SUBTYPE = N  # 3-channel; 28-90 VLL; 47Hz - 1KHz; 0.5VA/Ch(Max)

# Discrete I/O Module
#MODULE_TYPE = DT
#MODULE_SUBTYPE = 1  # 24-channel; 0–60 VDC
#MODULE_SUBTYPE = 2  # 16-channel; ±80V; Isolated
#MODULE_SUBTYPE = 3  # 4-channel; ±100V; Isolated
#MODULE_SUBTYPE = 4  # Enhanced version of "DT1"

# MIL-STD-1553 Module
#MODULE_TYPE = FT
#MODULE_SUBTYPE = 1  # 1-channel; Transformer
#MODULE_SUBTYPE = 2  # 2-channel; Transformer
#MODULE_SUBTYPE = 3  # 4-channel; Transformer
#MODULE_SUBTYPE = 4  # 1-channel; Direct
#MODULE_SUBTYPE = 5  # 2-channel; Direct
#MODULE_SUBTYPE = 6  # 4-channel; Direct
#MODULE_SUBTYPE = 7  # 1-channel; RS-422 I/F
#MODULE_SUBTYPE = 8  # 2-channel; RS-422 I/F

# L(R)VDT/D Module
#MODULE_TYPE = LD
#MODULE_SUBTYPE = 1  # 4-channel; 2-28 Vrms Input; FS 47 Hz - 1 KHz
#MODULE_SUBTYPE = 2  # 4-channel; 2-28 Vrms Input; FS 1 KHz - 5 KHz
#MODULE_SUBTYPE = 3  # 4-channel; 2-28 Vrms Input; FS 5 KHz - 10 KHz
#MODULE_SUBTYPE = 4  # 4-channel; 2-28 Vrms Input; FS 10 KHz - 20 KHz
#MODULE_SUBTYPE = 5  # 4-channel; 28-90 Vrms Input; FS 47 Hz - 1 KHz

# RTD Module
#MODULE_TYPE = RT
#MODULE_SUBTYPE = 1  # 8-channel; 16.7 Hz/channel

# Relay Module
#MODULE_TYPE = RY
#MODULE_SUBTYPE = 1  # 4-channel; Non-latching
#MODULE_SUBTYPE = 2  # 4-channel; Latching

# Serial Module
#MODULE_TYPE = SC
#MODULE_SUBTYPE = 1  # 4-channel; RS-232/422/423(MIL-STD-188C)/485
#MODULE_SUBTYPE = 2  # Isolated version of "SC1"
#MODULE_SUBTYPE = 3  # 8-channel; RS-232/422/485
#MODULE_SUBTYPE = 4  # 2-channel; IOCT Interface w/monitor
#MODULE_SUBTYPE = 5  # 2-channel; MIL-STD-188-114A - Non Isolated
#MODULE_SUBTYPE = 6  # 1-channel; RS-530 / TBD
#MODULE_SUBTYPE = 7  # SC1 w/ SYS GND per CH (in lieu of CTS-)

# SYN(RSL)/D Module
#MODULE_TYPE = SD
#MODULE_SUBTYPE = 1  # 4-channel; 2-28 Vrms Input; FS 47 Hz - 1 KHz
#MODULE_SUBTYPE = 2  # 4-channel; 2-28 Vrms Input; FS 1 KHz - 5 KHz
#MODULE_SUBTYPE = 3  # 4-channel; 2-28 Vrms Input; FS 5 KHz - 10 KHz
#MODULE_SUBTYPE = 4  # 4-channel; 2-28 Vrms Input; FS 10 KHz - 20 KHz
#MODULE_SUBTYPE = 5  # 4-channel; 28-90 Vrms Input; FS 47 Hz - 1 KHz

# TTL I/O Module
#MODULE_TYPE = TL
#MODULE_SUBTYPE = 1  # 24-channel; 0–5.5 V
#MODULE_SUBTYPE = 2  # Enhanced version of "TL1"

#############################################################################

ifeq ($(strip $(MODULE_TYPE)),)
    $(error MODULE_TYPE must be defined)
endif
ifeq ($(strip $(MODULE_SUBTYPE)),)
    $(error MODULE_SUBTYPE must be defined)
endif
MODULE_ID := $(strip $(MODULE_TYPE))$(strip $(MODULE_SUBTYPE))

ifeq ($(strip $(XILINX_SDK)),)
    ifeq ($(strip $(XILINX_VIVADO)),)
        $(error XILINX_VIVADO not defined)
    endif
    XILINX_SDK := $(subst Vivado,SDK,$(XILINX_VIVADO))
endif

ifeq ($(strip $(MODULE_TYPE)),DS)
    BSP_ROOT := ../bsp_ds/ps7_cortexa9_0
    LINKER_SCRIPT := lscript_ds.ld
else
    BSP_ROOT := ../bsp/ps7_cortexa9_0
    LINKER_SCRIPT := lscript.ld
endif

COMMON_DIR := src/common
MODULE_DIR := src/modules

# Include module specific Makefile
include $(MODULE_DIR)/$(MODULE_TYPE)/Makefile

ifeq ($(strip $(MODULE_SRC)),)
    MODULE_DIR := $(MODULE_DIR)/$(MODULE_TYPE)
else
    MODULE_DIR := $(MODULE_DIR)/$(MODULE_SRC)
endif

COMMON_C := \
    $(COMMON_DIR)/common.c \
    $(COMMON_DIR)/i2c.c \
    $(COMMON_DIR)/interrupts.c \
    $(COMMON_DIR)/io.c \
    $(COMMON_DIR)/main.c \
    $(COMMON_DIR)/menu.c \
    $(COMMON_DIR)/qspi.c \
    $(COMMON_DIR)/volt_temp.c \
    $(COMMON_DIR)/watchdog.c
COMMON_H := \
    $(COMMON_DIR)/common.h \
    $(COMMON_DIR)/i2c.h \
    $(COMMON_DIR)/includes.h \
    $(COMMON_DIR)/interrupts.h \
    $(COMMON_DIR)/qspi.h \
    $(COMMON_DIR)/menu.h \
    $(COMMON_DIR)/volt_temp.h \
    $(COMMON_DIR)/watchdog.h

MODULE_C += \
    $(MODULE_DIR)/module_main.c \
    $(MODULE_DIR)/module_menu.c
MODULE_H += \
    $(MODULE_DIR)/module.h

C_DEFS := -DMODULE_ID=$(MODULE_ID) -DMODULE_$(MODULE_ID)
# Define SERIAL_DEBUG for development
C_DEFS += -DSERIAL_DEBUG=1

# Use soft floating point support
#FPUFLAGS := -mfloat-abi=soft
# Use hard floating point unit
FPUFLAGS := -mfpu=neon -mfloat-abi=softfp

CPUFLAGS := $(FPUFLAGS) -march=armv7-a -mtune=cortex-a9 -mcpu=cortex-a9
GCCFLAGS := -Wall -Wno-unused-local-typedefs -Werror -std=c99 -fsigned-char
CFLAGS := -g -O0 $(CPUFLAGS) $(C_DEFS) $(GCCFLAGS) -I$(BSP_ROOT)/include -I$(COMMON_DIR) -I$(MODULE_DIR)

CROSS_COMPILE := arm-xilinx-eabi-
CC := $(CROSS_COMPILE)gcc
LD := $(CROSS_COMPILE)g++
NM := $(CROSS_COMPILE)nm
OD := $(CROSS_COMPILE)objdump
OC := $(CROSS_COMPILE)objcopy
SZ := $(CROSS_COMPILE)size

ifeq ($(or $(COMSPEC),$(ComSpec)),)
    RM := rm -rf
    ECHO := echo
    DATE := date
else
    RM := cs-rm -rf
    ECHO := $(XILINX_SDK)/gnuwin/bin/echo
    DATE := $(XILINX_SDK)/gnuwin/bin/date
endif

BIN_DIR := bin/$(MODULE_ID)
COMMON_BIN := $(BIN_DIR)/common
MODULE_BIN := $(BIN_DIR)/module
BUILD_DIRS := $(COMMON_BIN) $(MODULE_BIN)

INCLUDES := $(COMMON_H) $(MODULE_H)
FW_VERSION := $(FW_VER_MAJOR).$(FW_VER_MINOR)
FW_DATE := $(shell $(DATE) +'%b %d %Y')
FW_TIME := $(shell $(DATE) +'%H:%M:%S')
VERSION_FILE := $(COMMON_DIR)/version.h

COMMON_OBJS := $(patsubst $(COMMON_DIR)/%.c,$(COMMON_BIN)/%.o,$(COMMON_C))
MODULE_OBJS := $(patsubst $(MODULE_DIR)/%.c,$(MODULE_BIN)/%.o,$(MODULE_C))
OBJS := $(COMMON_OBJS) $(MODULE_OBJS)
LIBS := $(BSP_ROOT)/lib/*.a
ELF := $(BIN_DIR)/fw.elf

# Rules
.PHONY: all
all: check_id version $(ELF)

.PHONY: check_id
check_id:
ifeq ($(strip $(MODULE_ID)),)
	$(error MODULE_ID must be defined)
endif
	@echo Building $(MODULE_ID) module firmware...

.PHONY: version
version:
ifeq ($(strip $(FW_VER_MAJOR)),)
	$(error FW_VER_MAJOR must be defined in $(MODULE_DIR)/Makefile)
endif
ifeq ($(strip $(FW_VER_MINOR)),)
	$(error FW_VER_MINOR must be defined in $(MODULE_DIR)/Makefile)
endif
	@$(ECHO) "#define FW_VER_MAJOR $(FW_VER_MAJOR)" > $(VERSION_FILE)
	@$(ECHO) "#define FW_VER_MINOR $(FW_VER_MINOR)" >> $(VERSION_FILE)
	@$(ECHO) "#define FW_VERSION \"$(FW_VERSION)\"" >> $(VERSION_FILE)
	@$(ECHO) "#define FW_DATE \"$(FW_DATE)\"" >> $(VERSION_FILE)
	@$(ECHO) "#define FW_TIME \"$(FW_TIME)\"" >> $(VERSION_FILE)

.PHONY: clean
clean:
	$(RM) $(OBJS)
	$(RM) $(ELF) $(BIN_DIR)/*.objdump $(BIN_DIR)/*.map $(BIN_DIR)/*.bin
	$(RM) $(VERSION_FILE)

$(COMMON_OBJS): $(COMMON_BIN)/%.o: $(COMMON_DIR)/%.c $(INCLUDES) Makefile
	$(CC) $(CFLAGS) -c $< -o $@

$(MODULE_OBJS): $(MODULE_BIN)/%.o: $(MODULE_DIR)/%.c $(INCLUDES) Makefile $(MODULE_DIR)/Makefile
	$(CC) $(CFLAGS) -c $< -o $@

$(ELF): $(OBJS) $(LIBS) $(LINKER_SCRIPT)
	$(LD) -T$(LINKER_SCRIPT) -L$(BSP_ROOT)/lib $(OBJS) -Wl,--start-group,-lxil,-lgcc,-lc,--end-group -o $@
	$(NM) -n -l $@ > $(basename $@).map
	$(OC) --gap-fill=0xff -O binary $@ $(basename $@).bin
#	$(OD) -D -S -h $@ > $(basename $@).objdump
	$(SZ) $@

# Create 'bin' directory structure, if needed
$(OBJS): | $(BUILD_DIRS)
$(BUILD_DIRS):
ifeq ($(or $(COMSPEC),$(ComSpec)),)
	@mkdir -p $@
else
	@mkdir $(subst /,\\,$@)
endif

